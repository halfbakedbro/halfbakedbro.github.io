<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Euler Project on Ajit</title>
    <link>https://halfbakedbro.github.io/post/eulerproj/</link>
    <description>Recent content in Euler Project on Ajit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Aug 2020 18:59:43 +0530</lastBuildDate>
    
	<atom:link href="https://halfbakedbro.github.io/post/eulerproj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Problem3</title>
      <link>https://halfbakedbro.github.io/post/eulerproj/problem3/</link>
      <pubDate>Sun, 16 Aug 2020 18:59:43 +0530</pubDate>
      
      <guid>https://halfbakedbro.github.io/post/eulerproj/problem3/</guid>
      <description>  The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
  func Prob3() int64 { var n int64 = 600851475143 var high int64 = 0 var i int64 = 0 for n%2 == 0 { high = 2 n = n / 2 } var x float64 = float64(n) var b = int64(math.Sqrt(x)) for i = 3; i &amp;lt; b; i = i + 2 { for n%i == 0 { if i &amp;gt; high { high = i } n = n / i } } return high }  </description>
    </item>
    
    <item>
      <title>Problem2</title>
      <link>https://halfbakedbro.github.io/post/eulerproj/problem2/</link>
      <pubDate>Sat, 15 Aug 2020 19:56:47 +0530</pubDate>
      
      <guid>https://halfbakedbro.github.io/post/eulerproj/problem2/</guid>
      <description>  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip;
By considering the terms in the Fibonacci sequence whose values do not exceed four million (4,000,000), find the sum of the even-valued terms.
  func Prob2() int64 { var sum int64 = 0 var limit int64 = 4000000 var a, b, h int64 = 1, 1, 0 h = a + b for h &amp;lt; limit { /*if b%2 == 0 { sum = sum + b }*/ sum = sum + h a = b + h b = h + a h = a + b } return sum }  </description>
    </item>
    
    <item>
      <title>Problem1</title>
      <link>https://halfbakedbro.github.io/post/eulerproj/problem1/</link>
      <pubDate>Sat, 15 Aug 2020 19:41:48 +0530</pubDate>
      
      <guid>https://halfbakedbro.github.io/post/eulerproj/problem1/</guid>
      <description>  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
  func Prob1() int64 { var sum int64 = 0 var i int64 = 0 for i = 0; i &amp;lt; 1000; i++ { if i%3 == 0 || i%5 == 0 { sum = sum + i } } return sum }  </description>
    </item>
    
  </channel>
</rss>